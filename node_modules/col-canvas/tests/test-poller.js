/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var assert = require('assert');

var ActivitiesDefault = require('col-activities/lib/default');
var AssetsTestsUtil = require('col-assets/tests/util');
var CanvasPoller = require('col-canvas/lib/poller');
var DB = require('col-core/lib/db');
var TestsUtil = require('col-tests/lib/util');
var UsersTestUtil = require('col-users/tests/util');

var CanvasAssignment = require('./model').CanvasAssignment;
var CanvasDiscussion = require('./model').CanvasDiscussion;
var CanvasDiscussionEntry = require('./model').CanvasDiscussionEntry;
var CanvasFile = require('./model').CanvasFile;
var CanvasSubmission = require('./model').CanvasSubmission;
var CanvasTestsUtil = require('./util');
var CanvasUser = require('./model').CanvasUser;

describe('Canvas poller', function() {

  /**
   * Get a course object given a Canvas course id
   *
   * @param  {Number}           canvasCourseId      The id of the course in Canvas
   * @param  {Function}         callback            Invoked when the course has been retrieved
   * @param  {Course}           callback.course     The retrieved course object
   * @throws {AssertionError}                       Error thrown when an assertion failed
   */
  var getCourse = function(canvasCourseId, callback) {
    var options = {
      'where': {
        'canvas_course_id': canvasCourseId
      },
      'include': [{
        'model': DB.Canvas,
        'as': 'canvas'
      }]
    };
    DB.Course.findOne(options).complete(function(err, course) {
      assert.ok(!err);
      assert.ok(course);
      return callback(course);
    });
  };

  /**
   * Get a client in a course who has shared their points with the rest of the users in the course
   *
   * @param  {Course}     [course]            The course in which the client should be launched. If no courses is provided, one will be created
   * @param  {Function}   callback            Standard callback function
   * @param  {RestClient} callback.client     The client
   * @param  {Course}     callback.course     The course in which the client was launched
   * @param  {User}       callback.user       The user information of the client
   */
  var getClient = function(course, callback) {
    TestsUtil.getAssetLibraryClient(null, course, null, function(client, course, user) {
      UsersTestUtil.assertUpdateSharePoints(client, course, true, function() {
        return callback(client, course, user);
      });
    });
  };

  var getUserByName = function(users, name) {
    return _.findWhere(users, {'canvas_full_name': name});
  };

  describe('Users', function() {

    /**
     * Test that verifies that the Canvas poller creates a record for users that haven't launched a tool yet
     */
    it('creates records for users that have not launched a tool yet', function(callback) {
      // Generate a test course
      getClient(null, function(client, course, user) {

        // Get the actual course object so we can pass it into the poller
        getCourse(course.id, function(dbCourse) {

          // Prepare the mocked requests to Canvas
          var mockedCanvasUsers = [new CanvasUser('Jack McJackerson')];
          CanvasTestsUtil.mockPollingRequests(dbCourse, mockedCanvasUsers);

          // Poll the Canvas API for information
          CanvasPoller.handleCourse(dbCourse, function(err) {
            assert.ok(!err);

            // The poller should've created a user account for Jack
            UsersTestUtil.assertGetUsers(client, course, 2, function(users) {
              assert.ok(getUserByName(users, 'Jack McJackerson'));

              // Verify a subsequent run won't create another user record
              CanvasTestsUtil.mockPollingRequests(dbCourse, mockedCanvasUsers);
              CanvasPoller.handleCourse(dbCourse, function(err) {
                assert.ok(!err);
                UsersTestUtil.assertGetUsers(client, course, 2, function(users) {
                  return callback();
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies that the poller can page the Canvas User REST API
     */
    it('can page Canvas', function(callback) {
      getClient(null, function(client, course, user) {

        // Get the actual course object so we can pass it into the poller
        getCourse(course.id, function(dbCourse) {

          // Prepare the mocked requests to Canvas
          var mockedCanvasUsers = _.times(100, function(n) {
            return new CanvasUser('Test student ' + n);
          });
          CanvasTestsUtil.mockPollingRequests(dbCourse, mockedCanvasUsers);

          // Poll the Canvas API for information
          CanvasPoller.handleCourse(dbCourse, function(err) {
            assert.ok(!err);

            // There should now be 101 users in the course, 100 users synced through the poller and 1
            // test client
            UsersTestUtil.assertGetUsers(client, course, 101, function(users) {
              return callback();
            });
          });
        });
      });
    });
  });

  describe('Assignments', function() {

    /**
     * Test that verifies that activities are created for submissions
     */
    it('creates activities for submissions', function(callback) {
      // Generate a test course with a few users who will make submissions
      getClient(null, function(client1, course, user1) {
        getClient(course, function(client2, course, user2) {
          getClient(course, function(client3, course, user3) {
            getClient(course, function(client4, course, user4) {

              // Get the actual course object so we can pass it into the poller
              getCourse(course.id, function(dbCourse) {

                // Poll the canvas API but don't return the assignment just yet
                CanvasTestsUtil.mockPollingRequests(dbCourse, [], [], []);
                CanvasPoller.handleCourse(dbCourse, function(err) {
                  assert.ok(!err);

                  // Get all the users, they should all have 0 points
                  UsersTestUtil.assertGetLeaderboard(client1, course, 4, false, function(users) {
                    _.each(users, function(user) {
                      assert.strictEqual(user.points, 0);
                    });

                    // Poll the Canvas API and return an assignment without any submissions
                    var assignments = [
                      new CanvasAssignment(course.id)
                    ];
                    CanvasTestsUtil.mockPollingRequests(dbCourse, [], assignments, []);
                    CanvasPoller.handleCourse(dbCourse, function(err) {
                      assert.ok(!err);

                      // All the users should still have 0 points
                      UsersTestUtil.assertGetLeaderboard(client1, course, 4, false, function(users) {
                        _.each(users, function(user) {
                          assert.strictEqual(user.points, 0);
                        });

                        // Poll the Canvas API and return an assignment with a few submissions
                        var assignments = [
                          new CanvasAssignment(course.id, [
                            new CanvasSubmission(user1.id, 'online_url', 'http://www.google.com'),
                            new CanvasSubmission(user2.id, 'online_text_entry', 'Here is my essay on ...'),
                            new CanvasSubmission(user3.id, 'online_upload', [
                              new CanvasFile('image/jpeg', 'Oh noes', 'ohnoes.jpg')
                            ])
                          ])
                        ];
                        CanvasTestsUtil.mockPollingRequests(dbCourse, [], assignments, []);
                        CanvasPoller.handleCourse(dbCourse, function(err) {
                          assert.ok(!err);

                          // All the users who made a submission should've received points
                          UsersTestUtil.assertGetLeaderboard(client1, course, 4, false, function(users) {

                            var expectedPoints = _.find(ActivitiesDefault, {'type': 'submit_assignment'}).points;
                            assert.strictEqual(getUserByName(users, user1.fullName).points, expectedPoints);
                            assert.strictEqual(getUserByName(users, user2.fullName).points, expectedPoints);
                            assert.strictEqual(getUserByName(users, user3.fullName).points, expectedPoints);

                            // Users without submissions don't get any points
                            assert.strictEqual(getUserByName(users, user4.fullName).points, 0);

                            // Subsequent polls should not result in new activities
                            assignments[0].submissions[2].attachments[0].expectProcessing = false;
                            CanvasTestsUtil.mockPollingRequests(dbCourse, [], assignments, []);
                            CanvasPoller.handleCourse(dbCourse, function(err) {
                              assert.ok(!err);
                              UsersTestUtil.assertGetLeaderboard(client1, course, 4, false, function(users) {
                                assert.strictEqual(getUserByName(users, user1.fullName).points, expectedPoints);
                                assert.strictEqual(getUserByName(users, user2.fullName).points, expectedPoints);
                                assert.strictEqual(getUserByName(users, user3.fullName).points, expectedPoints);
                                assert.strictEqual(getUserByName(users, user4.fullName).points, 0);

                                return callback();
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies that the poller can page the Canvas Assignments REST API
     */
    it('can page Canvas', function(callback) {
      getClient(null, function(client, course, user) {

        // Get the actual course object so we can pass it into the poller
        getCourse(course.id, function(dbCourse) {

          // Prepare the mocked requests to Canvas
          var assignments = _.times(100, function(n) {
            return new CanvasAssignment(course.id, [
              new CanvasSubmission(user.id, 'online_url', 'http://www.google.com')
            ]);
          });
          CanvasTestsUtil.mockPollingRequests(dbCourse, [], assignments);

          // Poll the Canvas API for information
          CanvasPoller.handleCourse(dbCourse, function(err) {
            assert.ok(!err);

            // The test user made a 100 submissions which should result in earning 2000 points
            UsersTestUtil.assertGetLeaderboard(client, course, 1, false, function(leaderboard) {
              assert.strictEqual(leaderboard[0].points, 2000);
              return callback();
            });
          });
        });
      });
    });

    /**
     * Test that verifies that re-submissions don't create extra activities or points
     */
    it('does not create activities for re-submissions', function(callback) {
      getClient(null, function(client1, course, user1) {

        // Get the actual course object so we can pass it into the poller
        getCourse(course.id, function(dbCourse) {

          // Poll the Canvas API and return an assignment with a few submissions
          var assignments = [
            new CanvasAssignment(course.id, [
              new CanvasSubmission(user1.id, 'online_url', 'http://www.google.com')
            ])
          ];
          CanvasTestsUtil.mockPollingRequests(dbCourse, [], assignments, []);
          CanvasPoller.handleCourse(dbCourse, function(err) {
            assert.ok(!err);

            // Get the leaderboard so we can check the points don't change
            UsersTestUtil.assertGetLeaderboard(client1, course, 1, false, function(oldLeaderboard) {

              // Re-submit an assignment and change the type
              assignments[0].submissions[0].attempt++;
              assignments[0].submissions[0].submission_type = 'online_upload';
              assignments[0].submissions[0].attachments = [new CanvasFile('image/jpeg', 'Oh noes', 'ohnoes.jpg')];
              CanvasTestsUtil.mockPollingRequests(dbCourse, [], assignments, []);
              CanvasPoller.handleCourse(dbCourse, function(err) {
                assert.ok(!err);

                // Ensure the points didn't change
                UsersTestUtil.assertGetLeaderboard(client1, course, 1, false, function(newLeaderboard) {
                  assert.deepEqual(oldLeaderboard, newLeaderboard);

                  return callback();
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies that the poller creates assets for file submissions
     */
    it('creates assets for file submissions', function(callback) {
      // Generate a test course with a few users who will make submissions
      getClient(null, function(client1, course, user1) {
        getClient(course, function(client2, course, user2) {
          getClient(course, function(client3, course, user3) {
            getClient(course, function(client4, course, user4) {

              // Get the actual course object so we can pass it into the poller
              getCourse(course.id, function(dbCourse) {

                // Each user submits something different
                var user1Submission = new CanvasSubmission(user1.id, 'online_url', 'http://www.google.com');
                var user2Submission = new CanvasSubmission(user2.id, 'online_text_entry', 'Here is my essay on ...');
                var user3Submission = new CanvasSubmission(user3.id, 'online_upload', [
                  new CanvasFile('image/jpeg', 'File 1', 'file1.jpg')
                ]);
                var user4Submission = new CanvasSubmission(user4.id, 'online_upload', [
                  new CanvasFile('image/jpeg', 'File 2.1', 'file2.1.jpg'),
                  new CanvasFile('image/jpeg', 'File 2.2', 'file2.2.jpg')
                ]);
                var assignments = [
                  new CanvasAssignment(course.id, [user1Submission, user2Submission, user3Submission, user4Submission])
                ];
                CanvasTestsUtil.mockPollingRequests(dbCourse, [], assignments, []);
                CanvasPoller.handleCourse(dbCourse, function(err) {
                  assert.ok(!err);

                  // Assert the assets were created
                  AssetsTestsUtil.assertGetAssets(client1, course, null, 4, function(assets) {
                    // Assert the link was created correctly
                    var linkAsset = _.find(assets.results, {'type': 'link'});
                    assert.ok(linkAsset);
                    assert.strictEqual(linkAsset.title, 'http://www.google.com');
                    assert.strictEqual(linkAsset.url, 'http://www.google.com');

                    // Assert user3's file was created correctly
                    assert.ok(_.find(assets.results, {'type': 'file', 'title': 'File 1'}));

                    // Assert user4's files were created correctly
                    assert.ok(_.find(assets.results, {'type': 'file', 'title': 'File 2.1'}));
                    assert.ok(_.find(assets.results, {'type': 'file', 'title': 'File 2.2'}));

                    // Verify that polling again won't create any additional assets
                    assignments[0].submissions[2].attachments[0].expectProcessing = false;
                    assignments[0].submissions[3].attachments[0].expectProcessing = false;
                    assignments[0].submissions[3].attachments[1].expectProcessing = false;
                    CanvasTestsUtil.mockPollingRequests(dbCourse, [], assignments, []);
                    CanvasPoller.handleCourse(dbCourse, function(err) {
                      assert.ok(!err);
                      AssetsTestsUtil.assertGetAssets(client1, course, null, 4, function(newAssets) {
                        var newAssetIds = _.pluck(newAssets.results, 'id');
                        var oldAssetIds = _.pluck(assets.results, 'id');
                        assert.strictEqual(_.intersection(newAssetIds, oldAssetIds).length, 4);

                        // Verify that resubmitting each assignment causes the files to be deleted
                        user1Submission.attempt++;
                        user1Submission.url = 'http://www.yahoo.com';
                        user2Submission.attempt++;
                        user2Submission.body = 'My new essay';
                        user3Submission.attempt++;
                        user3Submission.attachments = [
                          new CanvasFile('image/jpeg', 'File 1-updated', 'file1-updated.jpg')
                        ];
                        user4Submission.attempt++;
                        user4Submission.attachments = [
                          new CanvasFile('image/jpeg', 'File 2.1-updated', 'file2.1-updated.jpg'),
                          new CanvasFile('image/jpeg', 'File 2.2-updated', 'file2.2-updated.jpg')
                        ];
                        CanvasTestsUtil.mockPollingRequests(dbCourse, [], assignments, []);
                        CanvasPoller.handleCourse(dbCourse, function(err) {
                          assert.ok(!err);

                          // Assert the old assets have been removed
                          AssetsTestsUtil.assertGetAssets(client1, course, null, 4, function(newAssets) {
                            // Assert these are all new assets
                            newAssetIds = _.pluck(newAssets.results, 'id');
                            assert.strictEqual(_.intersection(newAssetIds, oldAssetIds).length, 0);

                            // Assert the link was created correctly
                            var linkAsset = _.find(newAssets.results, {'type': 'link'});
                            assert.ok(linkAsset);
                            assert.strictEqual(linkAsset.title, 'http://www.yahoo.com');
                            assert.strictEqual(linkAsset.url, 'http://www.yahoo.com');

                            // Assert user3's file was created correctly
                            assert.ok(_.find(newAssets.results, {'type': 'file', 'title': 'File 1-updated'}));

                            // Assert user4's files were created correctly
                            assert.ok(_.find(newAssets.results, {'type': 'file', 'title': 'File 2.1-updated'}));
                            assert.ok(_.find(newAssets.results, {'type': 'file', 'title': 'File 2.2-updated'}));
                            return callback();
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies that the poller removes assets and activities related to outdated submissions
     */
    it('removes assets and activities related to outdated submissions', function(callback) {
      // Generate a test course with a few users who will make submissions
      getClient(null, function(client1, course, user1) {
        getClient(course, function(client2, course, user2) {
          getClient(course, function(client3, course, user3) {

            // Get the actual course object so we can pass it into the poller
            getCourse(course.id, function(dbCourse) {

              // Submit a file
              var assignments = [
                new CanvasAssignment(course.id, [
                  new CanvasSubmission(user1.id, 'online_upload', [
                    new CanvasFile('image/jpeg', 'File 1', 'file1.jpg')
                  ])
                ])
              ];
              CanvasTestsUtil.mockPollingRequests(dbCourse, [], assignments, []);
              CanvasPoller.handleCourse(dbCourse, function(err) {
                assert.ok(!err);

                // User 2 and 3 both like the file
                AssetsTestsUtil.assertGetAssets(client2, course, null, 1, function(assets) {
                  var fileAsset = assets.results[0];
                  AssetsTestsUtil.assertLike(client2, course, fileAsset.id, true, function() {
                    AssetsTestsUtil.assertLike(client3, course, fileAsset.id, true, function() {

                      // Get the leaderboard and confirm user 1 has 22 points (submit_assignment + 2 likes)
                      UsersTestUtil.assertGetLeaderboard(client1, course, 3, false, function(users) {
                        assert.strictEqual(getUserByName(users, user1.fullName).points, 22);
                        assert.strictEqual(getUserByName(users, user2.fullName).points, 1);
                        assert.strictEqual(getUserByName(users, user3.fullName).points, 1);

                        // User1 now re-submits his assignment
                        assignments[0].submissions[0].attempt++;
                        assignments[0].submissions[0].attachments = [new CanvasFile('image/jpeg', 'File 1-updated', 'file1-updated.jpg')];
                        CanvasTestsUtil.mockPollingRequests(dbCourse, [], assignments, []);
                        CanvasPoller.handleCourse(dbCourse, function(err) {
                          assert.ok(!err);

                          // Get the leaderboard and confirm user1 only has 20 points and the other
                          // two users lost their points for handing out likes
                          UsersTestUtil.assertGetLeaderboard(client1, course, 3, false, function(users) {
                            assert.strictEqual(getUserByName(users, user1.fullName).points, 20);
                            assert.strictEqual(getUserByName(users, user2.fullName).points, 0);
                            assert.strictEqual(getUserByName(users, user3.fullName).points, 0);
                            return callback();
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  describe('Discussions', function() {

    /**
     * Test that verifies that activities are created for discussions
     */
    it('creates activities for submissions', function(callback) {
      // Generate a test course with a few users who will add entries
      getClient(null, function(client1, course, user1) {
        getClient(course, function(client2, course, user2) {
          getClient(course, function(client3, course, user3) {

            // Get the actual course object so we can pass it into the poller
            getCourse(course.id, function(dbCourse) {

              // Poll the canvas API but don't return a discussion just yet
              CanvasTestsUtil.mockPollingRequests(dbCourse, [], [], []);
              CanvasPoller.handleCourse(dbCourse, function(err) {
                assert.ok(!err);

                // Get all the users, they should all have 0 points
                UsersTestUtil.assertGetLeaderboard(client1, course, 3, false, function(users) {
                  _.each(users, function(user) {
                    assert.strictEqual(user.points, 0);
                  });

                  // Poll the Canvas API and return the discussion
                  var discussion = new CanvasDiscussion(user1);
                  CanvasTestsUtil.mockPollingRequests(dbCourse, [], [], [discussion]);
                  CanvasPoller.handleCourse(dbCourse, function(err) {
                    assert.ok(!err);

                    var topicPoints = _.find(ActivitiesDefault, {'type': 'discussion_topic'}).points;
                    var entryPoints = _.find(ActivitiesDefault, {'type': 'discussion_entry'}).points;
                    var entryGetReplyPoints = _.find(ActivitiesDefault, {'type': 'get_discussion_entry_reply'}).points;

                    // The user who created the discussion should've received points
                    UsersTestUtil.assertGetLeaderboard(client1, course, 3, false, function(users) {
                      assert.strictEqual(getUserByName(users, user1.fullName).points, topicPoints);
                      assert.strictEqual(getUserByName(users, user2.fullName).points, 0);
                      assert.strictEqual(getUserByName(users, user3.fullName).points, 0);

                      // Subsequent polls should not result in new activities
                      CanvasTestsUtil.mockPollingRequests(dbCourse, [], [], [discussion]);
                      CanvasPoller.handleCourse(dbCourse, function(err) {
                        assert.ok(!err);
                        UsersTestUtil.assertGetLeaderboard(client1, course, 3, false, function(users) {
                          assert.strictEqual(getUserByName(users, user1.fullName).points, topicPoints);
                          assert.strictEqual(getUserByName(users, user2.fullName).points, 0);
                          assert.strictEqual(getUserByName(users, user3.fullName).points, 0);

                          // Add an entry to a discussion
                          discussion.addEntry(new CanvasDiscussionEntry(user2));
                          CanvasTestsUtil.mockPollingRequests(dbCourse, [], [], [discussion]);
                          CanvasPoller.handleCourse(dbCourse, function(err) {
                            assert.ok(!err);

                            // The user who added an entry on the discussion should now also have some points
                            UsersTestUtil.assertGetLeaderboard(client1, course, 3, false, function(users) {
                              assert.strictEqual(getUserByName(users, user1.fullName).points, topicPoints);
                              assert.strictEqual(getUserByName(users, user2.fullName).points, entryPoints);
                              assert.strictEqual(getUserByName(users, user3.fullName).points, 0);

                              // Reply to an entry
                              discussion.addEntry(new CanvasDiscussionEntry(user3, discussion.getEntries()[0].id));
                              CanvasTestsUtil.mockPollingRequests(dbCourse, [], [], [discussion]);
                              CanvasPoller.handleCourse(dbCourse, function(err) {
                                assert.ok(!err);

                                // The user who replied on an entry should've received some points. The user
                                // who made the original entry will get additional points
                                UsersTestUtil.assertGetLeaderboard(client1, course, 3, false, function(users) {
                                  assert.strictEqual(getUserByName(users, user1.fullName).points, topicPoints);
                                  assert.strictEqual(getUserByName(users, user2.fullName).points, entryPoints + entryGetReplyPoints);
                                  assert.strictEqual(getUserByName(users, user3.fullName).points, entryPoints);

                                  return callback();
                                });
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies that the poller can page the Canvas Discussions REST API
     */
    it('can page Canvas', function(callback) {
      // Generate a test course with a few users who will add entries
      getClient(null, function(client1, course, user1) {
        getClient(course, function(client2, course, user2) {
          getClient(course, function(client3, course, user3) {

            // Get the actual course object so we can pass it into the poller
            getCourse(course.id, function(dbCourse) {

              // Prepare the mocked requests to Canvas
              var discussions = _.times(100, function(n) {
                return new CanvasDiscussion(user1);
              });
              CanvasTestsUtil.mockPollingRequests(dbCourse, [], [], discussions);

              // Poll the Canvas API for information
              CanvasPoller.handleCourse(dbCourse, function(err) {
                assert.ok(!err);

                // The first user made a 100 discussion topics which should result in earning 500 points
                UsersTestUtil.assertGetLeaderboard(client1, course, 3, false, function(leaderboard) {
                  assert.strictEqual(getUserByName(leaderboard, user1.fullName).points, 500);
                  assert.strictEqual(getUserByName(leaderboard, user2.fullName).points, 0);
                  assert.strictEqual(getUserByName(leaderboard, user3.fullName).points, 0);

                  // Add 100 entries
                  _.each(discussions, function(discussion) {
                    discussion.addEntry(new CanvasDiscussionEntry(user2));
                  });
                  CanvasTestsUtil.mockPollingRequests(dbCourse, [], [], discussions);

                  // Poll the Canvas API for information
                  CanvasPoller.handleCourse(dbCourse, function(err) {
                    assert.ok(!err);

                    // The second user made a 100 entries which should result in earning 300 points
                    UsersTestUtil.assertGetLeaderboard(client1, course, 3, false, function(leaderboard) {
                      assert.strictEqual(getUserByName(leaderboard, user1.fullName).points, 500);
                      assert.strictEqual(getUserByName(leaderboard, user2.fullName).points, 300);
                      assert.strictEqual(getUserByName(leaderboard, user3.fullName).points, 0);

                      // Add 100 replies to entries
                      _.each(discussions, function(discussion) {
                        discussion.addEntry(new CanvasDiscussionEntry(user3, discussion.getEntries()[0].id));
                      });
                      CanvasTestsUtil.mockPollingRequests(dbCourse, [], [], discussions);

                      // Poll the Canvas API for information
                      CanvasPoller.handleCourse(dbCourse, function(err) {
                        assert.ok(!err);

                        // The third user made a 100 replies which should result in earning 200 points. Additionally
                        // the second user should've received a 100 points extra for getting 100 replies to their entries
                        UsersTestUtil.assertGetLeaderboard(client1, course, 3, false, function(leaderboard) {
                          assert.strictEqual(getUserByName(leaderboard, user1.fullName).points, 500);
                          assert.strictEqual(getUserByName(leaderboard, user2.fullName).points, 400);
                          assert.strictEqual(getUserByName(leaderboard, user3.fullName).points, 300);
                          return callback();
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });
});
