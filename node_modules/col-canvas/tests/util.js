/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var util = require('util');

var MockedRequest = require('col-tests/lib/model').MockedRequest;
var TestsUtil = require('col-tests/lib/util');

/**
 * Given a set of data, mock the requests that the Canvas API should deal with
 *
 * @param  {Course}                 course          The course that we'll be mocking requests for
 * @param  {CanvasUser[]}           users           The users that are registered in the course
 * @param  {CanvasAssignment[]}     assignments     The assignments that are available in the course
 * @param  {CanvasDiscussion[]}     discussions     The discussion topics that are available in the course
 */
var mockPollingRequests = module.exports.mockPollingRequests = function(course, users, assignments, discussions) {
  // Default some parameters
  users = users || [];
  assignments = assignments || [];
  discussions = discussions || [];

  mockGetCourseUsers(course, users);

  mockGetAssignments(course, assignments);
  _.each(assignments, function(assignment) {
    if (!_.isEmpty(assignment.submissions)) {
      mockGetSubmissions(course, assignment, assignment.submissions);
    }
  });

  mockGetDiscussions(course, discussions);
  _.each(discussions, function(discussion) {
    if (!_.isEmpty(discussion.getEntries())) {
      mockGetDiscussionEntries(course, discussion);
    }
  });
};

/**
 * Mock the REST API call for getting all the users of a course
 *
 * @param  {Course}         course    The course that we'll be mocking requests for
 * @param  {CanvasUser[]}   users     The users that are registered in the course
 */
var mockGetCourseUsers = module.exports.mockGetCourseUsers = function(course, users) {
  var url = util.format('/api/v1/courses/%d/users', course.canvas_course_id);
  TestsUtil.getCanvasAppServer(course.canvas)
    .expect(new MockedRequest('GET', url, 200, users));
};

/**
 * Mock the REST API call for getting all the assignments of a course
 *
 * @param  {Course}                 course          The course that we'll be mocking requests for
 * @param  {CanvasAssignment[]}     assignments     The assignments that are available in the course
 */
var mockGetAssignments = module.exports.mockGetAssignments = function(course, assignments) {
  var url = util.format('/api/v1/courses/%d/assignments', course.canvas_course_id);
  TestsUtil.getCanvasAppServer(course.canvas)
    .expect(new MockedRequest('GET', url, 200, assignments));
};

/**
 * Mock the REST API call for getting all the submissions of an assignment in a course
 *
 * @param  {Course}                 course          The course that we'll be mocking requests for
 * @param  {CanvasAssignment}       assignment      The assignment for which the submissions will be retrieved
 * @param  {CanvasSubmission[]}     submissions     The submissions that have been made on the assignment
 */
var mockGetSubmissions = module.exports.mockGetAssignments = function(course, assignment, submissions) {
  var url = util.format('/api/v1/courses/%d/assignments/%d/submissions', course.canvas_course_id, assignment.id);
  TestsUtil.getCanvasAppServer(course.canvas)
    .expect(new MockedRequest('GET', url, 200, submissions));
};

/**
 * Mock the REST API call for getting all the discussion topics in a course
 *
 * @param  {Course}                   course          The course that we'll be mocking requests for
 * @param  {CanvasDiscussion[]}       discussions     The discussion topics that are available in the course
 */
var mockGetDiscussions = module.exports.mockGetDiscussions = function(course, discussions) {
  var url = util.format('/api/v1/courses/%d/discussion_topics', course.canvas_course_id);
  var discussionsData = _.map(discussions, function(discussion) {
    return discussion.json();
  });
  TestsUtil.getCanvasAppServer(course.canvas)
    .expect(new MockedRequest('GET', url, 200, discussionsData));
};

/**
 * Mock the REST API call for getting all the discussion entries on a dicussion topic in a course
 *
 * @param  {Course}                   course          The course that we'll be mocking requests for
 * @param  {CanvasDiscussion}         discussion      The discussion for which the entries will be retrieved
 */
var mockGetDiscussionEntries = module.exports.mockGetDiscussionEntries = function(course, discussion) {
  var id = discussion.json().id;
  var url = util.format('/api/v1/courses/%d/discussion_topics/%d/entries', course.canvas_course_id, id);
  TestsUtil.getCanvasAppServer(course.canvas)
    .expect(new MockedRequest('GET', url, 200, discussion.getEntries()));
};
