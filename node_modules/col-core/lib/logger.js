/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var bunyan = require('bunyan');
var config = require('config');
var path = require('path');
var prettyStream = require('bunyan-prettystream');

// The logger to use when no logger is specified
var SYSTEM_LOGGER_NAME = 'system';

// The default log location
var DEFAULT_LOG_LOCATION = './logs/default.log';

// Variable that keeps track of all initialized loggers
var loggers = {};

// Standard out stream that will be used when logging to stout
var prettyStdOut = new prettyStream();
prettyStdOut.pipe(process.stdout);

/**
 * Get a logger for the specified name. If the logger doesn't exist yet, a new one will be created
 * using the configuration settings
 *
 * @param  {String}     name    The name of the logger
 * @return {Object}             The Bunyan logger for the specified name
 */
module.exports = function(name) {
  name = name || SYSTEM_LOGGER_NAME;

  // Create a new logger if a logger for the specified name doesn't exist yet
  if (!loggers[name]) {
    loggers[name] = createLogger(name);
  }

  return loggers[name];
};

/**
 * Create a logger with the provided name
 *
 * @param  {String}     name    The name of the logger to create
 * @api private
 */
var createLogger = function(name) {
  var logConfig = {
    'name': name,
    'serializers': {
      'err': bunyan.stdSerializers.err,
      'req': bunyan.stdSerializers.req,
      'res': bunyan.stdSerializers.res
    },
    'streams': []
  };

  // Pretty-print the logs to standard out
  if (config.get('log.stream') === 'stdout') {
    logConfig.streams.push({
      'level': config.get('log.level'),
      'stream': prettyStdOut
    });
  // Log to a log file
  } else {
    logConfig.streams.push({
      'level': config.get('log.level'),
      'path': config.get('log.stream') || DEFAULT_LOG_LOCATION
    });
  }

  // Create the Bunyan logger
  var logger = bunyan.createLogger(logConfig);

  // Wrap the error function to keep track of error counts
  logger.error = wrapErrorFunction(name, logger.error);

  return logger;
};

/**
 * Wrap the logger error to keep better track of errors
 *
 * @param  {String}     loggerName          The name of the logger for which the error logger will be wrapped
 * @param  {Function}   errorFunction       The error logger to wrap
 * @return {Function}                       The wrapped error logger
 * @api private
 */
var wrapErrorFunction = function(loggerName, errorFunction) {
  return function(data, msg) {
    // If the error came from sequelizejs, log the `err.parent` object
    // as that contains more pertinent information about what went wrong
    if (data.err && data.err.parent) {
      data.err = data.err.parent;
    }

    // Pass control back to Bunyan for message logging
    return errorFunction.apply(this, arguments);
  };
};
