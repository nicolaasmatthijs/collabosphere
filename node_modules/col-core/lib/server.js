/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var bodyParser = require('body-parser');
var config = require('config');
var express = require('express');
var http = require('http');
var util = require('util');

var log = require('./logger')('col-core/server');

var safePathPrefixes = [];

/**
 * Start the Collabosphere Express server on the configured port
 *
 * @return {Express}                The created express server
 */
var setUpServer = module.exports.setUpServer = function() {
  // Create the express server
  var app = express();

  // Expose the HTTP server on the express app to allow other modules to hook into it
  app.httpServer = http.createServer(app);

  // Start listening for requests
  var port = config.get('app.port');
  app.httpServer.listen(port, 'localhost');

  // Don't output pretty JSON
  app.set('json spaces', 0);

  // Don't output the x-powered-by header
  app.set('x-powered-by', false);

  /*!
   * Collabosphere supports the following type of request encodings:
   *
   *  * urlencoded (regular POST requests)
   *  * TODO: multipart (file uploads)
   *
   * A maximum limit of 250kb is imposed for `urlencoded` and `application/json` requests. This limit only
   * applies to the *incoming request data*. If the client needs to send more than 250kb, it should consider
   * using a proper multipart form request
   */
  app.use(bodyParser.urlencoded({'limit': '250kb', 'extended': true}));

  // TODO
  app.use(express.static('public'));

  log.info(util.format('Collabosphere server is listening at http://127.0.0.1:%s', port));

  return app;
};

/**
 * Aggregate the routes for the Collabosphere server to allow binding once all middleware
 * has been set up as registering the first route puts the router onto the middleware
 * stack
 *
 * @param  {Express}        app       The Express server to which to apply the router
 * @return {Router}                   Router for the Express server
 */
var setupRouter = module.exports.setupRouter = function(app) {
  var that = {};
  that.routes = [];

  /**
   * Set up a route on the associated server
   *
   * @param  {String}               method          The http method for the route
   * @param  {String|RegEx}         route           The path for the route
   * @param  {Function|Function[]}  handler         The function to handle requests to this route
   * @param  {String}               [telemetryUrl]  The string to use for telemetry tracking
   * @throws {Error}                                Error thrown when arguments aren't of the proper type
   */
  that.on = function(method, route, handler, telemetryUrl) {
    var isRouteValid = (_.isString(route) || _.isRegExp(route));
    var isHandlerValid = (_.isFunction(handler) || _.isArray(handler));
    if (!_.isString(method)) {
      throw new Error(util.format('Invalid type for request method "%s" when binding route "%s" to Collabosphere Router', method, route.toString()));
    } else if (!isRouteValid) {
      throw new Error(util.format('Invalid route path "%s" while binding route to Collabosphere Router', route.toString()));
    } else if (!isHandlerValid) {
      throw new Error(util.format('Invalid method handler given for route "%s" while binding to Collabosphere Router', route.toString()));
    }

    that.routes.push({
      'method': method,
      'route': route,
      'handler': handler,
      'telemetryUrl': telemetryUrl
    });
  };

  /**
   * Bind all the routes, this should only be called once by the server initialization
   */
  that.bind = function() {
    _.each(that.routes, function(route) {
      // Add a telemetry handler
      var handlers = [
        function(req, res, next) {
          req.telemetryUrl = route.telemetryUrl || route.route.replace(/:/, '');
          next();
        }
      ];

      app[route.method].apply(app, [route.route, handlers.concat(route.handler)]);
    });
  };

  return that;
};

/**
 * Finish initialising an Express server after all modules have had an opportunity
 * to initialize. This includes:
 *
 *  * CSRF protection
 *  * Binding the REST routes
 *  * Default "catch-all" error handling
 *
 * @param  {Express}        app       The Express server to finish initialising
 * @param  {Router}         router    The router for the Express server
 */
var postInitialize = module.exports.postInitialize = function(app, router) {
  /*!
   * Referer-based CSRF protection. If the request is not safe (e.g., POST, DELETE) and the origin of the request (as
   * specified by the HTTP Referer header) does not match the target host of the request (as specified by the HTTP
   * Host header), then the request will result in a 500 error.
   *
   * While referer-based protection is not highly recommended due to spoofing possibilities in insecure environments,
   * it currently offers the best trade-off between ease of use (e.g., for cURL interoperability), effort and security
   * against CSRF attacks.
   *
   * Middleware that gets called earlier, can force the CSRF check to be skipped by setting `checkCSRF` on the request.
   *
   * If using a utility such as `curl` to POST requests to the API, you can bypass this by just setting the referer
   * header to "/".
   *
   * More information about CSRF attacks: http://en.wikipedia.org/wiki/Cross-site_request_forgery
   */
  app.use(function(req, res, next) {
    // If earlier middleware determined that CSRF is not required, we can skip the check
    if (req.checkCSRF === false) {
      return next();
    }

    if (!isSafeMethod(req.method) && !isSafePath(req) && !isSameOrigin(req)) {
      log.warn({
        'method': req.method,
        'host': req.headers.host,
        'referer': req.headers.referer,
        'targetPath': req.path
      }, 'CSRF validation failed: attempted to execute unsafe operation from untrusted origin');
      return abort(res, 500, 'CSRF validation failed: attempted to execute unsafe method from untrusted origin');
    }

    return next();
  });

  // Bind routes
  router.bind();

  // Catch-all error handler
  app.use(function(err, req, res, next) {
    log.error({
      err: err,
      req: req,
      res: res
    }, 'Unhandled error in the request chain, caught at the default error handler');
    return abort(res, 500, 'An unexpected error occurred');
  });
};

/**
 * Abort a request with a given code and response message
 *
 * @param  {Response}   res         The express response object
 * @param  {Number}     code        The HTTP response code
 * @param  {String}     message     The message body to provide as a reason for aborting the request
 * @api private
 */
var abort = function(res, code, message) {
  res.setHeader('Connection', 'Close');
  return res.status(code).send(message);
};

/**
 * Determine whether the target path for a request is considered "safe" from CSRF attacks
 *
 * @param  {Request}    req         The express request object
 * @return {Boolean}                `true` if the path is safe from CSRF attacks, `false` otherwise
 * @api private
 */
var isSafePath = function(req) {
  var path = req.path;
  var matchingPaths = _.filter(safePathPrefixes, function(safePathPrefix) {
    return (path.indexOf(safePathPrefix) === 0);
  });
  return (matchingPaths.length > 0);
};

/**
 * Determine whether the given request method is considered "safe"
 *
 * @param  {String}     method      The request method
 * @return {Boolean}                `true` if the request method is safe (e.g., GET, HEAD), `false` otherwise
 * @api private
 */
var isSafeMethod = function(method) {
  return (method === 'GET' || method === 'HEAD');
};

/**
 * Determine whether the origin host of the given request is the same as the target host
 *
 * @param  {Request}    req         The express request object to test
 * @return {Boolean}                `true` if the request is of the same origin as the target host, `false` otherwise
 * @api private
 */
var isSameOrigin = function(req) {
  var host = req.headers.host;
  var referer = req.headers.referer;

  if (!referer) {
    return false;
  }

  if (referer.indexOf('/') !== 0) {
    // Verify the host portion against the host header
    referer = referer.split('://')[1];
    if (!referer || referer.split('/')[0] !== host) {
      // If there is nothing after the protocol (e.g., 'http://') or the host before the first slash does not match
      // we deem it not to be the same origin
      return false;
    } else {
      return true;
    }
  } else {
    // If the referer is a relative uri, it must be from the same origin
    return true;
  }
};
