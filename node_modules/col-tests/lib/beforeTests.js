/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var assert = require('assert');
var busboy = require('express-busboy');
var express = require('express');
var randomstring = require('randomstring');
var util = require('util');

var Collabosphere = require('col-core');
var DB = require('col-core/lib/db');

var TestsUtil = require('./util');

// Bootstrap the application server before the tests begin
before(function(callback) {
  // Start up the Collabosphere server
  Collabosphere.init(function(err) {
    assert.ok(!err);

    // Create 2 Canvas instances that can be used in the tests
    createCanvas(function(ucberkeleyCanvas) {
      createCanvas(function(ucdavisCanvas) {

        // Expose the Canvas instances on the global object
        global.tests = {
          'canvas': {
            'ucberkeley': ucberkeleyCanvas,
            'ucdavis': ucdavisCanvas
          }
        };
        return callback();
      });
    });
  });
});

after(function(callback) {
  Collabosphere.appServer.httpServer.close();
  return callback();
});

/**
 * Create a dummy canvas object
 *
 * @param  {Function}     callback              Standard callback function
 * @param  {Object}       callback.canvas       The created canvas object
 */
var createCanvas = function(callback) {
  // Mock a canvas instance
  mockCanvasAPI(function(api_domain, canvasAppServer) {
    DB.Canvas.build({
      'canvas_api_domain': api_domain,
      'api_key': randomstring.generate(),
      'lti_key': randomstring.generate(),
      'lti_secret': randomstring.generate(),
      'use_https': false
    }).save().complete(function(err, canvas) {
      assert.ok(!err);
      canvas = canvas.toJSON();
      canvas.appServer = canvasAppServer;
      return callback(canvas);
    });
  });
};

var canvasPort = 3001;

/**
 * Mock the Canvas REST API by spinning up an express web server
 *
 * @param  {Function}         callback                                Standard callback function
 * @param  {String}           callback.apiDomain                      The api domain on which the mocked REST api is available
 * @param  {Express}          callback.app                            The express web server that will be used to mock the canvas API
 * @param  {Function}         callback.app.expect                     A function that allows you to add an expected request
 * @param  {MockedRequest}    callback.app.expected.mockedRequest     An expected request
 * @api private
 */
var mockCanvasAPI = function(callback) {
  var app = express();

  // Holds a queue of expected requests that should hit the Canvas server
  var queue = [];

  var server = app.listen(canvasPort, function() {
    canvasPort++;

    var host = server.address().address;
    var port = server.address().port;
    var apiDomain = util.format('%s:%d', host, port);

    // Parse the incoming HTTP requests
    busboy.extend(app, {'upload': true});

    app.use(function(req, res, next) {
      if (_.isEmpty(queue)) {
        assert.fail('Was not expecting any requests reaching Canvas');
      }

      var mockedRequest = queue[0];

      // Ensure this request is something we're expecting. If this request was unexpected,
      // the queue will be reset and the failure will be thrown
      try {
        mockedRequest.isValid(req);
      } catch (err) {
        queue = [];

        throw err;
      }

      // Send the correct response back to the client
      mockedRequest.handle(req, res);

      // Remove the expected request from the queue
      queue.shift();
    });

    /**
     * Add a mocked request to the queue of expected requests
     *
     * @param  {MockedRequest}  mockedRequest   The mocked requests which should be added to the queue
     */
    app.expect = function(mockedRequest) {
      queue.push(mockedRequest);
    };

    return callback(apiDomain, app);
  });
};
