/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

/**
 * The information of a request that is expected to hit the mocked Canvas REST API
 *
 * @param  {String}     method                      The HTTP method
 * @param  {String}     path                        The path of the request
 * @param  {Number}     [statusCode]                The status code of the response that should be returned
 * @param  {Object}     [response]                  The body of the response that should be returned
 * @param  {Object}     [headers]                   The headers of the response that should be returned
 * @param  {Object}     [customHandler]             A custom handler. If this is specified, the `statusCode` and `responseBody` will be ignored and it's up to the `handler` to send a response
 * @param  {Request}    [customHandler.req]         The request that should be handled
 * @param  {Response}   [customHandler.res]         The response
 * @param  {Function}   [customValidator]           A function that adds additional validation of the request
 * @param  {Request}    [customValidator.req]       The request that should be validated
 */
var MockedRequest = module.exports.MockedRequest = function(method, path, statusCode, response, headers, customHandler, customValidator) {
  this.method = method;
  this.path = path;
  this.statusCode = statusCode;
  this.response = response;
  this.headers = headers;
  this.customHandler = customHandler;
  this.customValidator = customValidator;
};

/**
 * Check whether a request is valid
 *
 * @param  {Request}          req     The request to validate
 * @throws {AssertionError}           Error thrown when an assertion failed
 */
MockedRequest.prototype.isValid = function(req) {
  // Assert some basic properties of the HTTP request
  assert.strictEqual(req.method, this.method);
  assert.strictEqual(req.path, this.path);

  // Delegate any further validation to the custom checker
  if (this.customValidator) {
    this.customValidator(req);
  }
};

/**
 * Handle a request by sending the expected status code and response body or by passing it
 * on to the custom handler
 *
 * @param  {Request}          req     The request to handle
 * @param  {Response}         res     The response
 */
MockedRequest.prototype.handle = function(req, res) {
  if (this.customHandler) {
    return this.customHandler(req, res);
  }

  if (this.headers) {
    res.set(this.headers);
  }

  // The default handler is to return a status code and response
  res.status(this.statusCode).send(this.response);
};
