/**
 * Copyright Â©2016. The Regents of the University of California (Regents). All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its documentation
 * for educational, research, and not-for-profit purposes, without fee and without a
 * signed licensing agreement, is hereby granted, provided that the above copyright
 * notice, this paragraph and the following two paragraphs appear in all copies,
 * modifications, and distributions.
 *
 * Contact The Office of Technology Licensing, UC Berkeley, 2150 Shattuck Avenue,
 * Suite 510, Berkeley, CA 94720-1620, (510) 643-7201, otl@berkeley.edu,
 * http://ipira.berkeley.edu/industry-info for commercial licensing opportunities.
 *
 * IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL,
 * INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF
 * THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF REGENTS HAS BEEN ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
 * SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS PROVIDED
 * "AS IS". REGENTS HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 * ENHANCEMENTS, OR MODIFICATIONS.
 */

var assert = require('assert');

var CourseAPI = require('col-course');
var TestsUtil = require('col-tests');

var CourseTestUtil = require('./util');

describe('Course', function() {

  describe('Public attributes', function() {

    /**
     * Test that verifies that public attributes are returned
     */
    it('returns public attributes', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        client.course.getCourse(course, function(err, course) {
          assert.ok(!err);
          assert.ok(course);
          assert.ok(course.id);
          assert.ok(course.canvas_course_id);

          // Canvas properties include secrets and should not be returned.
          assert.ok(!course.canvas);

          return callback();
        });
      });
    });
  });

  describe('Daily notification settings', function() {
    /**
     * Test that verifies that daily notifications are enabled by default
     */
    it('is enabled by default', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        client.course.getCourse(course, function(err, course) {
          assert.ok(!err);
          assert.ok(course);

          // Verify that daily notifications are enabled
          assert.ok(course.enable_daily_notifications);

          return callback();
        });
      });
    });

    /**
     * Test that verifies daily notifications can be disabled and re-enabled
     */
    it('updates daily notifications', function(callback) {
      var instructor = TestsUtil.generateInstructor();
      TestsUtil.getAssetLibraryClient(null, null, instructor, function(client, course, instructor) {
        // Assert disable
        CourseTestUtil.assertUpdateDailyNotifications(client, course, false, function() {
          // Assert re-enable
          CourseTestUtil.assertUpdateDailyNotifications(client, course, true, function() {
            return callback();
          });
        });
      });
    });

    /**
     * Test that verifies authorization when updating daily notification settings
     */
    it('verifies authorization when updating', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        CourseTestUtil.assertUpdateDailyNotificationsFails(client, course, false, 401, function() {

          return callback();
        });
      });
    });
  });

  describe('Weekly notification settings', function() {
    /**
     * Test that verifies that weekly notifications are enabled by default
     */
    it('is enabled by default', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        client.course.getCourse(course, function(err, course) {
          assert.ok(!err);
          assert.ok(course);

          // Verify that weekly notifications are enabled
          assert.ok(course.enable_weekly_notifications);

          return callback();
        });
      });
    });

    /**
     * Test that verifies weekly notifications can be disabled and re-enabled
     */
    it('updates weekly notifications', function(callback) {
      var instructor = TestsUtil.generateInstructor();
      TestsUtil.getAssetLibraryClient(null, null, instructor, function(client, course, instructor) {
        // Assert disable
        CourseTestUtil.assertUpdateWeeklyNotifications(client, course, false, function() {
          // Assert re-enable
          CourseTestUtil.assertUpdateWeeklyNotifications(client, course, true, function() {
            return callback();
          });
        });
      });
    });

    /**
     * Test that verifies authorization when updating weekly notification settings
     */
    it('verifies authorization when updating', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        CourseTestUtil.assertUpdateWeeklyNotificationsFails(client, course, false, 401, function() {

          return callback();
        });
      });
    });
  });
});
