/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var assert = require('assert');

var TestsUtil = require('col-tests');
var UsersTestUtil = require('col-users/tests/util');

var ActivitiesDefaults = require('col-activities/lib/default');
var ActivitiesTestUtil = require('./util');

describe('Activity Types', function() {

  describe('Edit activity type configuration', function() {

    /**
     * Test that verifies that the configuration for an activity type in a course can be edited
     */
    it('can be edited', function(callback) {
      var adminUser = TestsUtil.generateAdminUser();
      TestsUtil.getAssetLibraryClient(null, null, adminUser, function(client, course, adminUser) {

        // Verify that the points for an activity type can be edited
        ActivitiesTestUtil.assertEditActivityTypeConfiguration(client, course, 'like', 10, null, function() {

          // Verify that an activity type can be disabled
          ActivitiesTestUtil.assertEditActivityTypeConfiguration(client, course, 'comment', null, false, function() {

            // Verify that setting the points for an activity and disabling can be done at the same time
            ActivitiesTestUtil.assertEditActivityTypeConfiguration(client, course, 'add_asset', 100, false, function() {

              // Verify that these changes are reflected in the activity type configuration
              ActivitiesTestUtil.assertGetActivityTypeConfiguration(client, course, function(configuration) {
                var likeActivityType = _.findWhere(configuration, {'type': 'like'});
                assert.strictEqual(likeActivityType.points, 10);
                assert.strictEqual(likeActivityType.enabled, true);
                var commentActivityType = _.findWhere(configuration, {'type': 'comment'});
                assert.strictEqual(commentActivityType.points, _.findWhere(ActivitiesDefaults, {'type': 'comment'}).points);
                assert.strictEqual(commentActivityType.enabled, false);
                var addAssetActivityType = _.findWhere(configuration, {'type': 'add_asset'});
                assert.strictEqual(addAssetActivityType.points, 100);
                assert.strictEqual(addAssetActivityType.enabled, false);

                // Verify that an activity type override can be overridden
                ActivitiesTestUtil.assertEditActivityTypeConfiguration(client, course, 'add_asset', 1000, true, function() {
                  ActivitiesTestUtil.assertGetActivityTypeConfiguration(client, course, function(configuration) {
                    var addAssetActivityType = _.findWhere(configuration, {'type': 'add_asset'});
                    assert.strictEqual(addAssetActivityType.points, 1000);
                    assert.strictEqual(addAssetActivityType.enabled, true);

                    return callback();
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies validation when creating a new category
     */
    it('is validated', function(callback) {
      var adminUser = TestsUtil.generateAdminUser();
      TestsUtil.getAssetLibraryClient(null, null, adminUser, function(client, course, adminUser) {

        // Invalid type
        ActivitiesTestUtil.assertEditActivityTypeConfigurationFails(client, course, 'foo', 10, null, 400, function() {
          ActivitiesTestUtil.assertEditActivityTypeConfigurationFails(client, course, 1, 10, null, 400, function() {

            // Invalid points
            ActivitiesTestUtil.assertEditActivityTypeConfigurationFails(client, course, 'comment', true, null, 400, function() {
              ActivitiesTestUtil.assertEditActivityTypeConfigurationFails(client, course, 'comment', 'foo', null, 400, function() {

                // Missing points and enabled
                ActivitiesTestUtil.assertEditActivityTypeConfigurationFails(client, course, 'comment', null, null, 400, function() {

                  // Verify that the activity type configuration has not changed
                  ActivitiesTestUtil.assertGetActivityTypeConfiguration(client, course, function(configuration) {
                    _.each(ActivitiesDefaults, function(activityType) {
                      ActivitiesTestUtil.assertActivityType(_.findWhere(configuration, {'type': activityType.type}), {'expectedActivityType': activityType});
                    });

                    return callback();
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies authorization when editing the configuration for an activity type in a course
     */
    it('verifies authorization', function(callback) {
      // Verify that the configuration for an activity type can not be edited by a non-administrator
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        ActivitiesTestUtil.assertEditActivityTypeConfigurationFails(client, course, 'comment', 20, null, 401, function() {

          return callback();
        });
      });
    });
  });

  describe('Get activity type configuration', function() {

    /**
     * Test that verifies that the activity type configration for a course can be retrieved
     */
    it('can be retrieved', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client1, course1, user1) {

        // Verify that the default configuration is returned by default
        ActivitiesTestUtil.assertGetActivityTypeConfiguration(client1, course1, function(configuration) {
          _.each(ActivitiesDefaults, function(activityType) {
            ActivitiesTestUtil.assertActivityType(_.findWhere(configuration, {'type': activityType.type}), {'expectedActivityType': activityType});
          });

          // Change the points for one activity type and disable another activity type
          var adminUser1 = TestsUtil.generateAdminUser();
          TestsUtil.getAssetLibraryClient(null, course1, adminUser1, function(client2, course1, user2) {
            ActivitiesTestUtil.assertEditActivityTypeConfiguration(client2, course1, 'like', 10, null, function() {
              ActivitiesTestUtil.assertEditActivityTypeConfiguration(client2, course1, 'comment', null, false, function() {

                // Verify that the configuration overrides are returned
                ActivitiesTestUtil.assertGetActivityTypeConfiguration(client1, course1, function(configuration) {
                  var likeActivityType = _.findWhere(configuration, {'type': 'like'});
                  assert.strictEqual(likeActivityType.points, 10);
                  assert.strictEqual(likeActivityType.enabled, true);
                  var commentActivityType = _.findWhere(configuration, {'type': 'comment'});
                  assert.strictEqual(commentActivityType.points, _.findWhere(ActivitiesDefaults, {'type': 'comment'}).points);
                  assert.strictEqual(commentActivityType.enabled, false);

                  // Verify that the configuration overrides are not applied to a different course
                  var adminUser2 = TestsUtil.generateAdminUser();
                  TestsUtil.getAssetLibraryClient(null, null, adminUser2, function(client3, course2, user3) {
                    ActivitiesTestUtil.assertGetActivityTypeConfiguration(client3, course2, function(configuration) {
                      _.each(ActivitiesDefaults, function(activityType) {
                        ActivitiesTestUtil.assertActivityType(_.findWhere(configuration, {'type': activityType.type}), {'expectedActivityType': activityType});
                      });

                      return callback();
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });
});
